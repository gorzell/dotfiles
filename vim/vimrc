set nocompatible              " be iMproved, required

" -----------------------------------------------------------------------------
" Vim Plug
" -----------------------------------------------------------------------------

" Load Plug if present.
if filereadable($HOME . "/.vim/plug.vim")
    source $HOME/.vim/plug.vim
endif

filetype plugin indent on

" -----------------------------------------------------------------------------
" Appearance
" -----------------------------------------------------------------------------

" Terminal Color Settings
set t_Co=256

syntax on

colors elflord
set background=dark     " Set to 'light' if you use a light background
highlight Comment       ctermfg=DarkCyan
highlight LineNr        ctermfg=DarkRed

set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:␣
set list

" Airline Configuration
let g:airline_powerline_fonts = 1
let g:airline_theme='badwolf'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'

" Window Configuration
set title
set ruler            " Show location of cursor in status bar
set showcmd          " Show multi-char cmds as you type; bottom right
set number           " Show line numbers
set scrolloff=2      " Cursors stays 2 lines below/above top/bottom
set mouse=a
set laststatus=2     " Always put a status line at the bottem of the window.

set nolist
set listchars=tab:»·,trail:·

let loaded_matchparen = 1     " Don't load the match paren plugin.
set noerrorbells              " No noise
set visualbell                " Flash the screen
set linebreak                 " Affects how wrapped text is displayed
set nowrap                    " Turn off wrapping by default.
set foldmethod=manual

" -----------------------------------------------------------------------------
" Splits 
" -----------------------------------------------------------------------------
" Default opening locations
set splitbelow
set splitright

" Simplify navigation keys
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Remap new horizontial and vertical splits
nnoremap <leader>- :sp<CR>
nnoremap <leader>\| :vsp<CR>


" Expand file serch to look in sub directories
set path+=**

" Display all matching files on tab completion
set wildmenu

match todo /@@@/

" Custom file types
autocmd BufNewFile,BufRead *.workflow set syntax=terraform

" Enable spell check for selected file types.
autocmd BufRead,BufNewFile *.txt setlocal spell spelllang=en_us
autocmd BufRead,BufNewFile README setlocal spell spelllang=en_us
set complete+=kspell

" -----------------------------------------------------------------------------
" Mappings
" -----------------------------------------------------------------------------

" Buffer Navigation
nnoremap gb :bn<CR> " Shortcut for next buffer the aligns with the next tab shortcut.
nnoremap gB :bp<CR> " Shortcut for previous buffer that aligns with the previous tab shortcut.

" Splits Navigation.
set splitright
set splitbelow
nnoremap <C-J> <C-W><C-J> " Navigate one up.
nnoremap <C-K> <C-W><C-K> " Navigate one down.
nnoremap <C-L> <C-W><C-L> " Navigate one right.
nnoremap <C-H> <C-W><C-H> " Navigate one left.

" NERDTree
nnoremap <silent> <leader>n :NERDTreeToggle<CR>

" Telescope
nnoremap <silent> <leader>ff <cmd>Telescope find_files<cr>
nnoremap <silent> <leader>fg <cmd>Telescope live_grep<cr>
nnoremap <silent> <leader>fb <cmd>Telescope buffers<cr>
nnoremap <silent> <leader>fh <cmd>Telescope help_tags<cr>

" Display current cursor position.  This simply makes it more verbose.
nnoremap <c-g> 2<c-g>

" Use jj in place of Esc to spare you pinky.
imap jj <Esc>

" -----------------------------------------------------------------------------
" Habit Breakers
" -----------------------------------------------------------------------------
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" -----------------------------------------------------------------------------
" Markdown
" -----------------------------------------------------------------------------
autocmd BufRead,BufNewFile *.md setlocal spell spelllang=en_us
let g:vim_markdown_folding_level = 2


" -----------------------------------------------------------------------------
" ASCII Doc
" -----------------------------------------------------------------------------
autocmd BufRead,BufNewFile *.adoc setlocal spell spelllang=en_us

" -----------------------------------------------------------------------------
" Rust
" -----------------------------------------------------------------------------
let g:rustfmt_autosave = 1

" -----------------------------------------------------------------------------
" Syntastic
" -----------------------------------------------------------------------------
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" -----------------------------------------------------------------------------
" LSP Bindings
" -----------------------------------------------------------------------------

" have a fixed column for the diagnostics to appear in
" this removes the jitter when warnings/errors flow in
set signcolumn=yes

" Code navigation shortcuts
nnoremap <silent> <c-]> <cmd>lua vim.lsp.buf.definition()<CR>
nnoremap <silent> K     <cmd>lua vim.lsp.buf.hover()<CR>
nnoremap <silent> gD    <cmd>lua vim.lsp.buf.implementation()<CR>
nnoremap <silent> <c-k> <cmd>lua vim.lsp.buf.signature_help()<CR>
nnoremap <silent> 1gD   <cmd>lua vim.lsp.buf.type_definition()<CR>
nnoremap <silent> gr    <cmd>lua vim.lsp.buf.references()<CR>
nnoremap <silent> g0    <cmd>lua vim.lsp.buf.document_symbol()<CR>
nnoremap <silent> gW    <cmd>lua vim.lsp.buf.workspace_symbol()<CR>
nnoremap <silent> gd    <cmd>lua vim.lsp.buf.definition()<CR>
nnoremap <silent> ga    <cmd>lua vim.lsp.buf.code_action()<CR>


" Diagnostics
" Set updatetime for CursorHold
" 300ms of no cursor movement to trigger CursorHold
set updatetime=300
" Show diagnostic popup on cursor hold
autocmd CursorHold * lua vim.diagnostic.open_float(nil, { focusable = false })

" Goto previous/next diagnostic warning/error
nnoremap <silent> g[ <cmd>lua vim.diagnostic.goto_prev()<CR>
nnoremap <silent> g] <cmd>lua vim.diagnostic.goto_next()<CR>


" Format on save
autocmd BufWritePre *.rs lua vim.lsp.buf.formatting_sync(nil, 200)

